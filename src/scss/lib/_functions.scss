/*Olli functions*/
@function savemapget($list,$key) {
  @if not map-has-key($list, $key) {
    @warn "`#{inspect($list)}` doesn't seem to have a key named `#{key}`.";
  }
  @return map-get($list, $key);
}

@function gcd($a, $b) {
  // From: http://rosettacode.org/wiki/Greatest_common_divisor#JavaScript
  @if ($b != 0) {
    @return gcd($b, $a % $b);
  } @else {
    @return abs($a);
  }
}

@function pow($base, $exponent, $prec: 12) {
  // Handles decimal exponents by trying to convert them into a fraction and then use a nthRoot-algorithm for parts of the calculation
  @if (floor($exponent) != $exponent) {
    $prec2: pow(10, $prec);
    $exponent: round($exponent * $prec2);
    $denominator: gcd($exponent, $prec2);
    @return nthRoot(pow($base, $exponent / $denominator), $prec2 / $denominator, $prec);
  }

  $value: $base;
  @if $exponent > 1 {
    @for $i from 2 through $exponent {
      $value: $value * $base;
    }
  } @else if $exponent < 1 {
    @for $i from 0 through -$exponent {
      $value: $value / $base;
    }
  }

  @return $value;
}

@function nthRoot($num, $n: 2, $prec: 12) {
  // From: http://rosettacode.org/wiki/Nth_root#JavaScript
  $x: 1;

  @for $i from 0 through $prec {
    $x: 1 / $n * (($n - 1) * $x + ($num / pow($x, $n - 1)));
  }

  @return $x;
}

@function luma($color) {
  // Thanks voxpelli for a very concise implementation of luminance measure in sass
  // Adapted from: https://gist.github.com/voxpelli/6304812
  $rgba: red($color), green($color), blue($color);
  $rgba2: ();
  @for $i from 1 through 3 {
    $rgb: nth($rgba, $i);
    $rgb: $rgb / 255;
    $rgb: if($rgb < .03928, $rgb / 12.92, pow(($rgb + .055) / 1.055, 2.4));
    $rgba2: append($rgba2, $rgb);
  }
  @return (.2126 * nth($rgba2, 1) + .7152 * nth($rgba2, 2) + 0.0722 * nth($rgba2, 3))*100;
}

@function contrast_ratio($color1, $color2) {
  $luma1: luma($color1) + 5;
  $luma2: luma($color2) + 5;
  $ratio: $luma1 / $luma2;
  @if $luma1 < $luma2 {
    $ratio: 1 / $ratio;
  }
  @return $ratio;
}

@function text-contrast($color, $bgcolor: $color,$threshold: 4.5) {
  //$threshold: 4.5; // 4.5 = WCAG AA,7= WCAG AAA
  $list: 10 20 30 40 50 60 70 80 90 100;
  @each $percent in $list {
    $lighter: lighten($bgcolor, $percent);
    $darker: darken($bgcolor, $percent);
    $darker-ratio: contrast_ratio($color, $darker);
    $lighter-ratio: contrast_ratio($color, $lighter);
    @if ($lighter-ratio > $darker-ratio) {
      @if ($lighter-ratio > $threshold) {
        @return $lighter;
      }
    }
    @if ($darker-ratio > $lighter-ratio) {
      @if ($darker-ratio > $threshold) {
        @return $darker;
      }
    }
  }
  @return if(lightness($color) < 51, #FFF, #000)
}

@function contrast($color) {
  @return if(lightness($color) < 51, #FFF, #000)
}
@function contrast2($color) {
  @if contrast_ratio($color, #FFF) < 4.5 {
    @return #000
  } @else {
    @return #fff
  }
}
/*
@function color-contrast($color,$amount: 100%) {

  @if (lightness( $color ) > 50) {
    //@return #000000; // Lighter color, return black
    @return darken($color, $amount)
  } @else {
    //@return #FFFFFF; // Darker color, return white
    @return lighten($color, $amount)
  }
}
*/
@function strip-unit ($num) {
  @return $num / ($num * 0 + 1);
}

@function px2em ($pixels,$base: $base-fontsize) {

  // $base could be in em or px (no unit = px).
  // Adjust accordingly to create a $divisor that
  // serves as context for $pixels.
  $multiplier: if(unit($base) == em, 16, 1);
  $divisor: strip-unit($base) * $multiplier;
  @return (strip-unit($pixels) / $divisor) * 1em;
}
@mixin fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value) {

    @media screen and (max-width: $min-vw) {
      @each $property in $properties {
        #{$property}: $min-value;
      }
    }

    @media screen and (min-width: $min-vw) {
      @each $property in $properties {
        #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }
    }
    @media screen and (min-width: $max-vw) {
      @each $property in $properties {
        #{$property}: $max-value;
      }
    }
  }

@function parseInt($n) { /* 2 */
  @return $n / ($n * 0 + 1);
}

@mixin rem($property, $values) {
  $px : (); /* 3 */
  $rem: (); /* 3 */

  @each $value in $values { /* 4 */

    @if $value == 0 or $value == auto { /* 5 */
      $px : append($px , $value);
      $rem: append($rem, $value);
    }

    @else {
      $unit: unit($value);    /* 6 */
      $val: parseInt($value); /* 6 */

      @if $unit == "px" {  /* 7 */
        $px : append($px,  $value);
        $rem: append($rem, ($val / $base-fontsize + rem));
      }

      @if $unit == "rem" { /* 7 */
        $px : append($px,  ($val * $base-fontsize + px));
        $rem: append($rem, $value);
      }
    }
  }

  @if $px == $rem {     /* 8 */
    #{$property}: $px;  /* 9 */
  } @else {
    #{$property}: $px;  /* 9 */
    #{$property}: $rem; /* 9 */
  }
}